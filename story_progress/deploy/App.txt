<!DOCTYPE html>
<html>
<head>
    <title>Story Progress Pie</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Jun 07 2015 23:26:03 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Jun 07 2015 23:26:03 GMT-0700 (PDT)";
        var CHECKSUM = 21055416128;
    </script>

    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        if (!window.location.origin) {
            window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
        }
        
        Rally.onReady(function() {
             
Ext.define('timebox-selector', {
    extend : 'Ext.Container',
    componentCls : 'app',
    alias : 'widget.timebox-selector',
    cls : 'timebox-selector',
    layout : 'hbox',
    width : '100%',
    mixins : [
        'Rally.Messageable'
    ],
    constructor : function()
    {
        this.stateId = Rally.environment.getContext().getScopedStateId('timebox-filter');
        this.callParent(arguments);
    },
    initComponent : function()
    {
        this.callParent(arguments);
        this._createReleaseCombo();
        this.addEvents('releasechange','iterationchange');
        
        // configured to allow others to ask what the current selection is,
        // in case they missed the initial message
        this.subscribe(this, 'requestTimebox', this._requestTimebox, this);
        
    },
    _createReleaseCombo : function()
    {
        this._releaseCombo = this.add({
            xtype : 'rallyreleasecombobox',
            fieldLabel : 'Program Increment',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 130,
            width : 280,
            labelAlign : 'right',
            stateful : false,
            stateId : 'releasecombo',
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            defaultToCurrentTimebox : true,
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var release = t.getRecord();
                    this.fireEvent('releasechange',release);
                    console.log("Publishing Release:", release);
                    this.publish('timeboxReleaseChanged', release);
                    this._updateIterationCombo(release);
                },
                scope : this
            }
        });
    },
    _updateIterationCombo : function(release)
    {
        this.remove('globaliterationpicker');
        var endFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "EndDate",
            operator : "<=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        });
        var startFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "StartDate",
            operator : ">=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        });
        var filters = endFilter.and(startFilter);

        this._iterationCombo = this.add({
            xtype : 'rallyiterationcombobox',
            itemId : 'globaliterationpicker',
            fieldLabel : 'Sprint/Iteration',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 100,
            labelAlign : 'right',
            stateful : false,
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            stateId : 'iterationcombo',
            allowBlank : true,
            allowClear : true,
            allowNoEntry : true,
            noEntryText : 'PI Scope',
            emptyText : 'PI Scope',
            noEntryValue : null,
            defaultToCurrentTimebox : false,
            defaultSelectPosition : 'first',
            storeConfig : {
                remoteFilter : true,
                filters : filters
            },
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var iteration = t.getRecord();
                    this.fireEvent('iterationchange',iteration);
                    this.publish('timeboxIterationChanged', iteration);
                },
                scope : this
            }
        });
    },
    _requestTimebox : function(source) {
        console.log('Got request timebox message', source);
        var release = this.getReleaseRecord();
        console.log('release',release);
        if (release) {
            this.publish('timeboxReleaseChanged', release);
        } 
        
        var iteration = this.getIterationRecord();
        console.log('iteration', iteration);
        if (iteration) {
            this.publish("timeboxIterationChanged",  iteration);
        }
    },
    getReleaseRecord: function(){
        if (this._releaseCombo){
            return this._releaseCombo.getRecord() || null;
        }
        return null;
    },
    getIterationRecord: function(){
        if (this._iterationCombo){
            return this._iterationCombo.getRecord() || null;
        }
        return null;
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
//        var output_args = [];
//        output_args = Ext.Array.push(output_args,[timestamp]);
//        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));
//
//        window.console && console.log.apply(console,output_args);
            var i = -1, l = arguments.length, args = [], fn = 'console.log(args)';
            while(++i<l){
                args.push('args['+i+']');
            };
            fn = new Function('args',fn.replace(/args/,args.join(',')));
            fn(arguments);
    }

});

/*
 * For pie inside of pie --
 * 
 * Give an array of records for the inside ring and an array for the outside,
 * they should have a link via some field in the outer_ring record (e.g., Parent or WorkProduct
 * 
 * 
 */
 Ext.define('Rally.technicalservices.DoughnutPie',{
    extend: 'Ext.Container',
    alias: 'widget.tsdoughnut',
    padding: 5,
    
    config: {

        /**
         * @cfg [{Ext.data.Model}] 
         * Records that will each have a slice of the inside pie
         */
        inside_records: [],
        /**
         * @cfg {String} 
         * Field on the inside records that holds the size of the slice
         */
        inside_size_field: 'PlanEstimate',
        /**
         * @cfg [{Ext.data.Model}] 
         * Records that will each have a slice of the outside pie
         */
        outside_records: [],
        /**
         * @cfg {String} 
         * Field on the outside records that holds the size of the slice
         */
        outside_size_field: 'Estimate',
        /**
         * @cfg {String} 
         * Field on the outside records links to the inside record
         */
        record_link_field: 'WorkProduct',
        /**
         * @cfg {String}
         * The title to put on the chart
         */
        title: '',
        /**
         * @cfg {Number}
         * Colors to be applied in order (must be HSLA)
         * We'll take them and put them into the first part of:
         * 'hsla(235,100%,75%,1)'
         * where 25 is the color, 100% is the saturation, 75% is the lightness (100% is white), 1 is the opacity
         * 
         * NICE SITE: http://hslpicker.com/
         * 
         */
        colors: [235, 20, 126, 180, 50, 84 ],
        /**
         * @cfg {Number}
         * The object id of the owner we care about showing items for
         */
        highlight_owner: null,
        /**
         * 
         * @cfg Boolean
         * Set to true to keep the pie from showing items that are not highlighted (when
         * highlight_owner is not null).  Defaults to false
         */
        remove_non_highlighted: false,
        /**
         * 
         * @cfg String
         * The color to use for items on the pie not owned by the user in highlight_owner
         * (assuming highlight_owner !== null)
         * 
         */
        non_owned_color: '#F8F8FF',
        minHeight: 300,
        flex: 1,
        /**
         * @cfg String
         * The color to use for task elements that hold a spot for stories without tasks
         */
        missing_color: 'white'
        
        
    },
    
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.data = this.calculateSlices();
        this.callParent(arguments);
        
        this._addChart();
    },
    
    
    calculateSlices: function() {
        var inside_series_data = [];
        var inside_series_by_id = {};
                
        // make an array of hash items for the stories
        // and a tracking array so we can see if there
        // are tasks that have a story not in the list
        Ext.Array.each(this.inside_records, function(record,idx) {
            var color_index = this._getColorIndex(idx);
            var owner = record.get('Owner');
            var owner_id = null;
            if ( owner ) { 
                owner_id = owner.ObjectID;
            }
            var data_point = {
                name: record.get('FormattedID'),
                y: record.get(this.inside_size_field),
                color: 'hsla(' + this.colors[color_index] + ',100%,40%,1)',
                idx: color_index,
                owner: owner_id
            };
            
                                
            if ( record.get('Blocked') ) {
                data_point.color = 'red';
            }
                    
            inside_series_by_id[record.get('FormattedID')] = data_point;
            inside_series_data.push(data_point);
        },this);
        
        // find any outer rings that have a parent not in the
        // inner list already.  Along the way, add the 
        // child to an array on the parent so we can use it
        // later to find the percentage.
        Ext.Array.each(this.outside_records, function(record) {
            var parent = record.get(this.record_link_field);
            if ( !parent ) {
                console.log("No parent for ", record.get('FormattedID'));
            } else {
                var parent_id = parent.FormattedID;
                var parent_size = parent[this.inside_size_field];
                
                var parent_data = inside_series_by_id[parent_id];
                if ( parent_data ) {
                    if ( ! parent_data.children ) { parent_data.children = []; }
                    parent_data.children.push(record);
                }
            }
        },this);
        
        // make child data series
        Ext.Object.each(inside_series_by_id, function(id,inside_item){            
            var children = inside_item.children || [];
            var parent_size = inside_item.y || 0;
            var parent_index = inside_item.idx || 0;
            inside_item.highlight_owner = false; // mark if one of the kids belongs to the this.highlight_owner
            inside_item.child_data = [];
            
            if ( parent_size > 0 ) {
                var child_total = 0;
                Ext.Array.each(children,function(child){
                    var size = child.get(this.outside_size_field) || 0;
                    child_total += size;
                },this);
                
                Ext.Array.each(children, function(child) {
                    
                    var size = child.get(this.outside_size_field) || 0;
                    if ( child_total > 0 ) {
                        size =  ( size / child_total ) * parent_size;
                    }

                    var data_point = { 
                        name: child.get("FormattedID"),
                        y:size,
                        color: 'hsla(' + this.colors[parent_index] + ',100%,40%,1)'
                    };
                    
                    var inner_state_lightness = {
                        "Defined": "40%",
                        "In-Progress": "60%",
                        "Completed": "80%"
                    };
                    
                    var state = child.get('State');
                    if ( state ) {
                        data_point.color = 'hsla(' + this.colors[parent_index] + ',100%,' + inner_state_lightness[state] + ',1)';
                    }
                    
                    if ( child.get('Blocked') ) {
                        data_point.color = 'red';
                    }
                    
                    
                    if ( this.highlight_owner ) {
                        if ( child.get('Owner') && child.get('Owner').ObjectID != this.highlight_owner ) {
                            data_point.color = this.non_owned_color;
                        } else if ( !child.get('Owner') ) {
                            data_point.color = this.non_owned_color;
                        } else {
                            inside_item.highlight_owner = true;
                        }
                        
                    }
                    inside_item.child_data.push(data_point);
                },this);
                
                if ( this.highlight_owner && inside_item.color != "red" ) {
                    if ( inside_item.owner != this.highlight_owner && ! inside_item.highlight_owner ) {
                        inside_item.color = this.non_owned_color;
                    }
                }
                
                if ( ! children || children.length == 0 ) {
                    inside_item.child_data.push({ 
                        name: 'none',
                        y:parent_size,
                        color: this.missing_color
                    });
                }
                
                // check for all the children are zero
                if ( children && children.length > 0 ) {
                    var total_points = 0;
                    Ext.Array.each(inside_item.child_data, function(child){
                        total_points += child.y;
                    });
                    if ( total_points == 0 ) {
                        Ext.Array.each(inside_item.child_data, function(child) {
                            child.y = parent_size / children.length;
                        });
                    }
                }
                
            }
            
        },this);
        

        var filtered_inside_series = [];
        var filtered_outside_series = [];
        
        // remove non-highlighted parents
        if ( this.remove_non_highlighted && this.highlight_owner ) {
            Ext.Array.each(inside_series_data, function(inside_data_point){
                if ( inside_data_point.color !== this.non_owned_color ) {
                    filtered_inside_series.push(inside_data_point);
                }
            }, this);
            
        } else {
            filtered_inside_series = inside_series_data;
        }
        
        Ext.Array.each(filtered_inside_series, function(inside_data_point) {
            filtered_outside_series = Ext.Array.push(filtered_outside_series,inside_data_point.child_data);
        });
        
        return [filtered_inside_series, filtered_outside_series];
    },
    
    _getColorIndex: function(idx) {
        if ( idx < this.colors.length ) {
            return idx;
        }
        return idx % this.colors.length;
     },
     
     _addChart: function() {
        console.log("adding chart");
        
        var series = [{
            name: 'Stories',
            data: this.data[0],
            size: '60%',
            tooltip: {
                headerFormat: '',
                pointFormat: '<b>{point.name}</b>.'
            },
            dataLabels: {
//                formatter: function () {
//                    return this.y > 5 ? this.point.name : null;
//                },
                color: this.missing_color,
                distance: -30
            }
        },
        {
            name: 'Tasks',
            data: this.data[1],
            size: '70%',
            innerSize: '60%',
            tooltip: {
                headerFormat: '',
                pointFormat: '<b>{point.name}</b>.'
            },
            dataLabels: {
                distance: 5,
                formatter: function () {
                    return this.point.name !== 'none' ? this.point.name : null;
                }
            }
        }];
        
        var chart = this.add({
            xtype:'rallychart',
            loadMask: false,
           
            chartData: {
                series: series
            },
            chartConfig: {
                chart: { type: 'pie' },
                title: {
                    text: this.title,
                    align: 'center'
                },
                tooltip: {
                    enabled: false
                },
                plotOptions: {
                    pie: {
                        shadow: true,
                        center: ['50%', '35%']
                    }
                }
            }
        });
        
//        var me = this;
//        chart.on('chartRendered', function() {
//            console.log("Resizing", this, this.getWidth(), this.getHeight());
//            chart.setSize(this.getWidth() * 0.85, this.getWidth() * 0.85);
//        }, this, { single: true });

//        console.log("setting height");
        //this.getBody().setSize(this.getWidth() * 0.95);
     }

});
/**
 * the loading mask wasn't going away!
 */

Ext.override(Rally.ui.chart.Chart,{
    onRender: function () {
        this.callParent(arguments);
        this._unmask();
    }
});

Ext.define("TSWorkQueue", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [ 
        {xtype:'container',itemId:'settings_box'},
        {xtype:'container',itemId:'selector_box'},
        {xtype:'tsinfolink', minHeight: 18},
        {xtype:'container',itemId:'display_box', layout: { type: 'hbox' } },
        {xtype:'container',itemId:'legend_box' }
    ],
    config: {
        defaultSettings: {
            showScopeSelector :  false
        }
    },
    
    launch: function() {
        if (this.isExternal()){
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());
        }
    },
    
    _launch: function(settings) {
        var me = this;
        this.logger.log("launch",settings);
        
        this._addLegend(this.down('#legend_box'));
        
        if ( settings.showScopeSelector == true || settings.showScopeSelector == "true" ) {
            this.down('#selector_box').add({
                xtype : 'timebox-selector',
                context : this.getContext(),
                listeners: {
                    releasechange: function(release){
                        this._changeRelease(release);
                    },
                    iterationchange: function(iteration){
                        this._changeIteration(iteration);
                    },
                    scope: this

                }
            });
        } else {
            this.subscribe(this, 'timeboxReleaseChanged', this._changeRelease, this);
            this.subscribe(this, 'timeboxIterationChanged', this._changeIteration, this);

            this.publish('requestTimebox', this);
        }
    },
    
    _changeRelease: function(release) {
        // do nothing yet
    },
    
    _changeIteration: function(iteration) {
        var me = this;
        this.logger.log("Iteration changed:", iteration);
        
        this._setInfo(); 
                
        var base_filter = [  {property:'Iteration.Name',value:iteration.get('Name')}];
        
        var team_story_filters = Ext.Array.push([],base_filter);
        team_story_filters.push({property:'ScheduleState',value:'In-Progress'});
        team_story_filters = Rally.data.wsapi.Filter.and(team_story_filters);
        
        var team_task_filters = Rally.data.wsapi.Filter.and( Ext.Array.push([],base_filter) );
        
        var project_filter = Ext.create('Rally.data.wsapi.Filter',{property:'Project.ObjectID',value:this.getContext().getProject().ObjectID}).or(
            Ext.create('Rally.data.wsapi.Filter',{property:'Project.Parent.ObjectID',value:this.getContext().getProject().ObjectID})
        );
        team_task_filters = team_task_filters.and(project_filter);
        team_story_filters = team_story_filters.and(project_filter);
        
        var task_fields = ['Estimate','FormattedID','WorkProduct','PlanEstimate','Blocked','State','Owner','ObjectID'];
        var story_fields = ['PlanEstimate','FormattedID','Blocked','Owner','ObjectID'];
        
        Deft.Chain.sequence([
            function() { return me._loadAStoreWithAPromise('UserStory', story_fields, team_story_filters); },
            function() { return me._loadAStoreWithAPromise('Task', task_fields, team_task_filters); }
            
        ]).then({
            scope: this,
            success: function(results) {
                var stories = results[0];
                var tasks = results[1];
                this.setLoading(false);
                
                this._makePies(stories,tasks);
            },
            failure: function(error_message){
                alert(error_message);
            }
        }).always(function() {
            me.setLoading(false);
        });
    },
    
    _loadAStoreWithAPromise: function(model_name, model_fields,filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.setLoading("Finding " + model_name + " records");
                  
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                me.setLoading(false);
                
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _addLegend: function(container) {
        var color_data = [
            { color: 'red', label: 'Red indicates blocked' },
            { color: 'black', color2: 'gray', color3: 'lightgray',  label: 'Gradients indicate the state of the task (lighter is closer to Completed)' },
            { color: 'white', label: 'White tasks on the Self chart are owned by others' }
        ];
        
        var ct = container.add({
            xtype: 'container',
            padding: 10,
            tpl: '<tpl for="."><div class="tslegend" style="background-color:{color}">&nbsp;</div><tpl if="color2"><div class="tslegend" style="background-color:{color2}">&nbsp;</div></tpl><tpl if="color3"><div class="tslegend" style="background-color:{color3}">&nbsp;</div></tpl><div class="tslegendtext">&nbsp;&nbsp;{label}</div><span class="tslegendspacer">&nbsp;</span><br/></tpl>'
//            tpl: '<div class="tslegendtext">Legend:  </div><tpl for="."><div class="tslegend" style="background-color:{color}">&nbsp;</div><tpl if="color2"><div class="tslegend" style="background-color:{color2}">&nbsp;</div></tpl><tpl if="color3"><div class="tslegend" style="background-color:{color3}">&nbsp;</div></tpl><div class="tslegendtext">&nbsp;&nbsp;{label}</div><span class="tslegendspacer">&nbsp;</span><br/></tpl>'
        });
        
        ct.update(color_data);
    },
    
    _makePies: function(inside_records,outside_records){
        var container =  this.down('#display_box');

        this.logger.log("_makePies", inside_records, outside_records);
        
        container.removeAll();
        
        if ( inside_records.length == 0 && outside_records.length == 0 ) {
            container.add({xtype:'container',html:'No items in selection'});
        } else {
    
            container.add({
                xtype: 'tsdoughnut',
                title: 'Self',
                itemId: 'selfie',
                margin: '0 10 0 0',
                highlight_owner: this.getContext().getUser().ObjectID,
                remove_non_highlighted: true,
                inside_records: inside_records,
                inside_size_field: 'PlanEstimate',
                outside_records: outside_records,
                outside_size_field: 'Estimate'
            });
            container.add( {
                xtype: 'tsdoughnut',
                title: 'Team',
                margin: '0 10 0 5',
                itemId: 'team',
                inside_records: inside_records,
                inside_size_field: 'PlanEstimate',
                outside_records: outside_records,
                outside_size_field: 'Estimate'
            });
            
        }
    },
    
    _setInfo: function() {
        var chart_info = [];
        
        chart_info.push("These charts show stories in the In Progress state with their tasks.");
        chart_info.push("Gray tasks on the Self chart represent tasks that belong to someone other than the current user");
        chart_info.push("The 'lightness' of tasks represents progress from Defined (darkest) to Completed (brightest)");
        chart_info.push("White tasks on either chart represent a story not having any tasks");
        chart_info.push("Size of story slices is based upon Plan Estimate");
        chart_info.push("Size of task slices is based on Estimate. (If none of the tasks on a story have Estimates, they are distributed evenly across the story.)")
        
        this.down('tsinfolink').informationHtml = chart_info.join('<br/>');
    },
    
     /********************************************
     /* Overrides for App class
     /*
     /********************************************/
    //getSettingsFields:  Override for App
    getSettingsFields: function() {
        var me = this;

        return [ 
            {
                name: 'showScopeSelector',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show Scope Selector<br/><span style="color:#999999;"><i>Tick to use this to broadcast settings.</i></span>'
            }
        ];
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //showSettings:  Override
    showSettings: function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields: this.getSettingsFields(),
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope,
            autoScroll: true
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()){
            if (this.down('#settings_box').getComponent(this._appSettings.id)==undefined){
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    _onSettingsSaved: function(settings){
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._launch(settings);
    }

            
});

            
               Rally.launchApp('TSStoryProgressPie', {
                   name: 'Story Progress Pie'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}

.story-progress-titlebar{
    text-align: center;
    font: bold 16px arial,sans-serif;
}

.legend { 
    text-align: center;
}

.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 0px;
    margin-right: 15px;
    cursor: pointer;
}

.tslegend {
    width: 18px;
    height: 14px;
    border-radius: 4px;
    text-align: center;
    color: white;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

.tslegendtext {
    font-family: 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif;
    font-size: '14px'!important;
    color: #274b6d;
    display: inline
}
.tslegendspacer {
    padding: 15px;
    display: inline;
}

.tslegend-square {
    width: 14px;
    height: 14px;
    text-align: center;
    border-radius: 7px;
    color: rgba(103,103,103,1);;
    background-color: rgba(103,103,103,1);
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

.tslegend-circle {
    width: 14px;
    height: 14px;
    text-align: center;
    border-radius: 7px;
    color: rgba(103,103,103,.5);
    background-color: rgba(103,103,103,.5);
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

    </style>

</head>
<body></body>
</html>